generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ユーザーモデル
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  progress      Progress[]
  quizResults   QuizResult[]
}

// NextAuth.js用のモデル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// レッスンタイプ
enum LessonType {
  HIRAGANA
  KATAKANA
  VOCABULARY
  GRAMMAR
  KANJI
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// レッスンモデル
model Lesson {
  id          String          @id @default(cuid())
  title       String          // 日本語タイトル
  titlePt     String          // ポルトガル語タイトル
  description String?         // 説明
  descriptionPt String?       // ポルトガル語説明
  content     Json            // レッスンコンテンツ（柔軟なJSON形式）
  type        LessonType
  difficulty  DifficultyLevel @default(BEGINNER)
  order       Int             // レッスンの順番
  isPublished Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  progress    Progress[]
  quizzes     Quiz[]

  @@index([type, order])
}

// ユーザーの進捗
model Progress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(false)
  score       Int?     // 0-100
  timeSpent   Int?     // 秒単位
  lastStudied DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
}

// クイズモデル
model Quiz {
  id          String     @id @default(cuid())
  lessonId    String?
  title       String
  titlePt     String
  questions   Json       // クイズの質問（JSON配列）
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  lesson      Lesson?    @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  results     QuizResult[]
}

// クイズ結果
model QuizResult {
  id              String   @id @default(cuid())
  userId          String
  quizId          String
  score           Int      // 正解数
  totalQuestions  Int      // 総問題数
  answers         Json     // ユーザーの回答記録
  timeSpent       Int?     // 秒単位
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

// 単語帳（ユーザーが保存した単語）
model Vocabulary {
  id          String   @id @default(cuid())
  userId      String
  word        String   // 日本語
  reading     String   // 読み方（ひらがな/カタカナ）
  meaning     String   // ポルトガル語の意味
  example     String?  // 例文
  examplePt   String?  // 例文のポルトガル語訳
  notes       String?  // ユーザーのメモ
  mastered    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}